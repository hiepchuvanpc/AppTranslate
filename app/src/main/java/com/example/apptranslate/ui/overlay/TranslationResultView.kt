// File: app/src/main/java/com/example/apptranslate/ui/overlay/TranslationResultView.kt

package com.example.apptranslate.ui.overlay

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Rect
import android.graphics.Typeface
import android.util.Log
import android.util.TypedValue
import android.view.Gravity
import android.view.View
import android.widget.FrameLayout
import android.widget.TextView
import androidx.core.view.isVisible
import com.example.apptranslate.R

// ‚ú® EXPERIMENT: Interface ƒë·ªÉ thay th·∫ø databinding
interface TranslationResultBinding {
    val tvTranslatedText: TextView
    val loadingIndicator: android.widget.ProgressBar
    val root: FrameLayout
}

@SuppressLint("ViewConstructor")
class TranslationResultView(context: Context) : FrameLayout(context) {

    companion object {
        private const val TAG = "TranslationResultView"
    }

    private val binding: TranslationResultBinding
    private var originalWidth: Int = 0
    private var originalHeight: Int = 0
    private var onSizeChangeListener: ((newWidth: Int, newHeight: Int) -> Unit)? = null

    // NEW: Bi·∫øn ƒë·ªÉ l∆∞u ranh gi·ªõi v√† c√°c box kh√°c
    private var screenBounds: Rect = Rect()
    private var usedRects: List<Rect> = emptyList()

    init {
        // ‚ú® EXPERIMENT: T·∫°o TextView programmatically nh∆∞ ImageTranslationOverlay
        setBackgroundResource(R.drawable.translation_text_background)

        val textView = TextView(context).apply {
            id = View.generateViewId()
            setTypeface(Typeface.DEFAULT)
            includeFontPadding = false
            gravity = Gravity.CENTER
            setPadding(3, 3, 3, 3) // ‚ú® COPY EXACTLY t·ª´ ImageTranslationOverlay
            setTextColor(resources.getColor(R.color.primary_text, null))
            ellipsize = android.text.TextUtils.TruncateAt.END // ‚ú® COPY t·ª´ ImageTranslationOverlay

            // üîß Multi-line setup
            maxLines = 5
            setSingleLine(false)
            setLineSpacing(2f, 1.1f)
        }

        addView(textView, FrameLayout.LayoutParams(
            FrameLayout.LayoutParams.MATCH_PARENT,
            FrameLayout.LayoutParams.MATCH_PARENT
        ))

        // T·∫°o ProgressBar
        val progressBar = android.widget.ProgressBar(context).apply {
            id = View.generateViewId()
            visibility = View.GONE
        }

        addView(progressBar, FrameLayout.LayoutParams(
            40.dpToPx(), 40.dpToPx(), Gravity.CENTER
        ))

        // T·∫°o binding object ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code hi·ªán t·∫°i
        binding = object : TranslationResultBinding {
            override val tvTranslatedText: TextView = textView
            override val loadingIndicator: android.widget.ProgressBar = progressBar
            override val root: FrameLayout = this@TranslationResultView
        }
    }

    private fun Int.dpToPx(): Int = (this * resources.displayMetrics.density).toInt()

    fun setOnSizeChangeListener(listener: (newWidth: Int, newHeight: Int) -> Unit) {
        onSizeChangeListener = listener
    }

    // ‚ú® NEW: Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc ban ƒë·∫ßu
    fun setOriginalSize(width: Int, height: Int) {
        originalWidth = width
        originalHeight = height
        Log.d("TranslationView", "üéØ setOriginalSize: ${width}√ó${height}")
    }

    fun showLoading() {
        binding.tvTranslatedText.isVisible = false
        binding.loadingIndicator.isVisible = true
    }

    // MODIFIED: H√†m n√†y gi·ªù s·∫Ω nh·∫≠n c·∫£ danh s√°ch c√°c box kh√°c
    fun setEnvironment(bounds: Rect, otherUsedRects: List<Rect>) {
        this.screenBounds = bounds
        this.usedRects = otherUsedRects
    }

    fun initializeSize(width: Int, height: Int) {
        originalWidth = width
        originalHeight = height
    }

    fun updateText(text: String, forcedTextSize: Float? = null) {
        binding.loadingIndicator.isVisible = false
        binding.tvTranslatedText.isVisible = true

        // ‚ú® CRITICAL FIX: ƒê·∫£m b·∫£o lu√¥n c√≥ k√≠ch th∆∞·ªõc h·ª£p l√Ω
        val workingWidth = if (originalWidth > 0) originalWidth else layoutParams?.width ?: 200
        val workingHeight = if (originalHeight > 0) originalHeight else layoutParams?.height ?: 100
        
        Log.d("TranslationView", "üîß updateText: originalSize=${originalWidth}√ó${originalHeight}, workingSize=${workingWidth}√ó${workingHeight}")

        if (workingWidth > 0 && workingHeight > 0) {
            val (finalWidth, finalHeight, finalTextSize) = calculateOptimalSizeAndText(text, Rect(0, 0, workingWidth, workingHeight))

            binding.tvTranslatedText.text = text
            binding.tvTranslatedText.setTextSize(TypedValue.COMPLEX_UNIT_SP, forcedTextSize ?: finalTextSize)

            // üîß CRITICAL FIX: Force update layout params ƒë·ªÉ TextView s·ª≠ d·ª•ng ƒë√∫ng k√≠ch th∆∞·ªõc
            binding.tvTranslatedText.layoutParams = FrameLayout.LayoutParams(finalWidth, finalHeight).apply {
                gravity = Gravity.CENTER
            }

            // ‚ú® DEBUG: Log TextView settings ƒë·ªÉ ki·ªÉm tra
            Log.d("TranslationView", """
                üì∫ TEXTVIEW SETUP:
                üî§ Text: ${text.take(30)}${if (text.length > 30) "..." else ""}
                üìè Text size: ${forcedTextSize ?: finalTextSize}sp
                üì¶ Box size: ${finalWidth}√ó${finalHeight}px
                ‚öôÔ∏è MaxLines: ${binding.tvTranslatedText.maxLines}
                ‚öôÔ∏è SingleLine: ${binding.tvTranslatedText.isSingleLine}
                ‚öôÔ∏è Gravity: ${binding.tvTranslatedText.gravity}
                üìê Layout size: ${binding.tvTranslatedText.layoutParams.width}√ó${binding.tvTranslatedText.layoutParams.height}
            """.trimIndent())

            if (finalWidth != originalWidth || finalHeight != originalHeight) {
                onSizeChangeListener?.invoke(finalWidth, finalHeight)
            }
        } else {
            // Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ k√≠ch th∆∞·ªõc
            Log.w("TranslationView", "‚ö†Ô∏è No valid size available, using fallback")
            binding.tvTranslatedText.text = text
            binding.tvTranslatedText.setTextSize(TypedValue.COMPLEX_UNIT_SP, forcedTextSize ?: 12f)
        }
    }

    // ‚ú® COPIED FROM ImageTranslationOverlay: Ki·ªÉm tra text c√≥ v·ª´a v·ªõi box kh√¥ng  
    private fun doesTextFitInBox(text: String, textSize: Float, boxWidth: Int, boxHeight: Int): Boolean {
        val testView = TextView(context).apply {
            this.text = text
            this.textSize = textSize
            setPadding(12, 8, 12, 8) // Padding gi·ªëng v·ªõi ImageTranslationOverlay
            setTypeface(android.graphics.Typeface.DEFAULT)
            includeFontPadding = false
            maxLines = 5 // Gi·ªõi h·∫°n t·ªëi ƒëa 5 d√≤ng
        }

        testView.measure(
            View.MeasureSpec.makeMeasureSpec(boxWidth, View.MeasureSpec.EXACTLY),
            View.MeasureSpec.makeMeasureSpec(boxHeight, View.MeasureSpec.EXACTLY)
        )

        // Ki·ªÉm tra xem text c√≥ b·ªã c·∫Øt kh√¥ng
        testView.layout(0, 0, boxWidth, boxHeight)
        val layout = testView.layout

        if (layout == null) return false

        // Ki·ªÉm tra xem c√≥ b·ªã ellipsize kh√¥ng
        val lastLine = layout.lineCount - 1
        val hasEllipsis = layout.getEllipsisCount(lastLine) > 0

        // Ki·ªÉm tra xem text c√≥ v∆∞·ª£t qu√° chi·ªÅu cao kh√¥ng
        val textHeight = layout.height
        val availableHeight = boxHeight - testView.paddingTop - testView.paddingBottom

        Log.d("TranslationView", "Text fit check: hasEllipsis=$hasEllipsis, textHeight=$textHeight, availableHeight=$availableHeight")

        return !hasEllipsis && textHeight <= availableHeight
    }

    private fun calculateOptimalSizeAndText(text: String, originalRect: Rect): Triple<Int, Int, Float> {
        // ‚ú® COPIED FROM ImageTranslationOverlay: Logic t√≠nh textSize gi·ªëng h·ªát
        var textSize = when {
            originalRect.height() < 25 -> 9f
            originalRect.height() < 35 -> 11f
            originalRect.height() < 50 -> 13f
            originalRect.height() < 70 -> 15f
            else -> 17f
        }
        val minTextSize = 8f
        
        Log.d("TranslationView", "üéØ calculateOptimalSizeAndText: box=${originalRect.width()}√ó${originalRect.height()}, startTextSize=${textSize}f")
        
        // ‚ú® B∆Ø·ªöC 1: Th·ª≠ thu nh·ªè text ƒë·ªÉ v·ª´a v·ªõi box ban ƒë·∫ßu (gi·ªëng ImageTranslationOverlay)
        while (textSize >= minTextSize) {
            if (doesTextFitInBox(text, textSize, originalRect.width(), originalRect.height())) {
                Log.d("TranslationView", "‚úÖ Text fits with size ${textSize}f in original box")
                return Triple(originalRect.width(), originalRect.height(), textSize)
            }
            textSize -= 0.5f
        }

        // ‚ú® B∆Ø·ªöC 2: N·∫øu text qu√° d√†i, m·ªü r·ªông box v√† d√πng textSize t·ªëi thi·ªÉu
        Log.d("TranslationView", "üìè Text too long, expanding box with minTextSize=${minTextSize}f")
        val expandedRect = expandBoxToFitTextIntelligent(originalRect, text, minTextSize)
        return Triple(expandedRect.width(), expandedRect.height(), minTextSize)
    }

    // ‚ú® NEW: Intelligent expansion nh∆∞ ImageTranslationOverlay
    private fun expandBoxToFitTextIntelligent(originalRect: Rect, text: String, textSize: Float): Rect {
        val expandedRect = Rect(originalRect)
        
        // B∆∞·ªõc 1: Th√™m padding nh·ªè ban ƒë·∫ßu
        val padding = 6
        expandedRect.inset(-padding, -padding)
        
        // B∆∞·ªõc 2: T√≠nh to√°n k√≠ch th∆∞·ªõc text c·∫ßn thi·∫øt
        val tempTextView = TextView(context).apply {
            this.text = text
            setTextSize(TypedValue.COMPLEX_UNIT_SP, textSize)
            setPadding(8, 8, 8, 8)
            includeFontPadding = false
            maxLines = 5
            ellipsize = null
            setSingleLine(false)
            setLineSpacing(2f, 1.1f)
        }
        
        // ƒêo v·ªõi width h·ª£p l√Ω ƒë·ªÉ c√≥ multi-line
        val preferredWidth = minOf(expandedRect.width(), (screenBounds.width() * 0.6f).toInt())
        tempTextView.measure(
            View.MeasureSpec.makeMeasureSpec(preferredWidth, View.MeasureSpec.AT_MOST),
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        )
        
        val requiredWidth = tempTextView.measuredWidth + 16 // padding
        val requiredHeight = tempTextView.measuredHeight + 16 // padding
        
        // B∆∞·ªõc 3: Expansion logic nh∆∞ ImageTranslationOverlay
        val widthNeeded = maxOf(0, requiredWidth - expandedRect.width())
        val heightNeeded = maxOf(0, requiredHeight - expandedRect.height())
        
        Log.d("TranslationView", "üîß Intelligent expansion: text='${text.take(20)}...' widthNeeded=$widthNeeded heightNeeded=$heightNeeded")
        
        // M·ªü r·ªông width tr∆∞·ªõc
        if (widthNeeded > 0) {
            val expandLeft = widthNeeded / 2
            val expandRight = widthNeeded - expandLeft
            
            val canExpandLeft = expandedRect.left - expandLeft >= screenBounds.left &&
                               !hasAdjacentBoxOnLeft(expandedRect, expandLeft)
            val canExpandRight = expandedRect.right + expandRight <= screenBounds.right &&
                                !hasAdjacentBoxOnRight(expandedRect, expandRight)
            
            when {
                canExpandLeft && canExpandRight -> {
                    expandedRect.left -= expandLeft
                    expandedRect.right += expandRight
                }
                canExpandLeft && !canExpandRight -> {
                    val maxLeftExpansion = minOf(widthNeeded, expandedRect.left - screenBounds.left)
                    expandedRect.left -= maxLeftExpansion
                }
                !canExpandLeft && canExpandRight -> {
                    val maxRightExpansion = minOf(widthNeeded, screenBounds.right - expandedRect.right)
                    expandedRect.right += maxRightExpansion
                }
            }
        }
        
        // Sau ƒë√≥ m·ªü r·ªông height
        if (heightNeeded > 0) {
            val expandTop = heightNeeded / 2
            val expandBottom = heightNeeded - expandTop
            
            val canExpandTop = expandedRect.top - expandTop >= screenBounds.top &&
                              !hasAdjacentBoxOnTop(expandedRect, expandTop)
            val canExpandBottom = expandedRect.bottom + expandBottom <= screenBounds.bottom &&
                                 !hasAdjacentBoxOnBottom(expandedRect, expandBottom)
            
            when {
                canExpandTop && canExpandBottom -> {
                    expandedRect.top -= expandTop
                    expandedRect.bottom += expandBottom
                }
                canExpandTop && !canExpandBottom -> {
                    val maxTopExpansion = minOf(heightNeeded, expandedRect.top - screenBounds.top)
                    expandedRect.top -= maxTopExpansion
                }
                !canExpandTop && canExpandBottom -> {
                    val maxBottomExpansion = minOf(heightNeeded, screenBounds.bottom - expandedRect.bottom)
                    expandedRect.bottom += maxBottomExpansion
                }
            }
        }
        
        Log.d("TranslationView", "‚úÖ Expansion result: ${originalRect.width()}√ó${originalRect.height()} ‚Üí ${expandedRect.width()}√ó${expandedRect.height()}")
        return expandedRect
    }

    // NEW: H√†m ki·ªÉm tra va ch·∫°m v·ªõi c√°c box kh√°c
    private fun isOverlappingWithOthers(rect: Rect): Boolean {
        val margin = 8 // üîß C·∫¢I TI·∫æN: TƒÉng margin buffer ƒë·ªÉ tr√°nh ƒë√® l√™n nhau
        val checkRect = Rect(rect.left - margin, rect.top - margin, rect.right + margin, rect.bottom + margin)

        return usedRects.any { usedRect ->
            val result = Rect.intersects(usedRect, checkRect)
            if (result) {
                Log.d("TranslationView", "üí• OVERLAP DETECTED: New=$checkRect vs Used=$usedRect")
            }
            result
        }
    }

    // ‚ú® NEW: Direction-specific collision detection from ImageTranslationOverlay
    private fun hasAdjacentBoxOnLeft(rect: Rect, margin: Int): Boolean {
        val checkRect = Rect(rect.left - margin, rect.top, rect.left, rect.bottom)
        return usedRects.any { Rect.intersects(it, checkRect) }
    }

    private fun hasAdjacentBoxOnRight(rect: Rect, margin: Int): Boolean {
        val checkRect = Rect(rect.right, rect.top, rect.right + margin, rect.bottom)
        return usedRects.any { Rect.intersects(it, checkRect) }
    }

    private fun hasAdjacentBoxOnTop(rect: Rect, margin: Int): Boolean {
        val checkRect = Rect(rect.left, rect.top - margin, rect.right, rect.top)
        return usedRects.any { Rect.intersects(it, checkRect) }
    }

    private fun hasAdjacentBoxOnBottom(rect: Rect, margin: Int): Boolean {
        val checkRect = Rect(rect.left, rect.bottom, rect.right, rect.bottom + margin)
        return usedRects.any { Rect.intersects(it, checkRect) }
    }

    // HEAVILY MODIFIED: Logic m·ªü r·ªông box th√¥ng minh v√† c√¢n ƒë·ªëi
    // ‚ú® ENHANCED: Direction-specific expansion nh∆∞ ImageTranslationOverlay
    private fun expandBoxToFitText(originalRect: Rect, text: String, textSize: Float): Rect {
        Log.d("TranslationView", "üöÄ STARTING EXPANSION for text: ${text.take(30)}...")

        val requiredSize = calculateRequiredBoxSize(text, textSize)
        val extraPadding = 6

        val targetWidth = requiredSize.first + extraPadding
        val targetHeight = requiredSize.second + extraPadding

        val widthNeeded = maxOf(0, targetWidth - originalRect.width())
        val heightNeeded = maxOf(0, targetHeight - originalRect.height())

        var expandedRect = Rect(originalRect)

        Log.d("TranslationView", """
            üîß EXPANSION DEBUG:
            üìè Required size: ${requiredSize.first}√ó${requiredSize.second}px
            üéØ Target size: ${targetWidth}√ó${targetHeight}px
            üì¶ Original rect: ${originalRect.width()}√ó${originalRect.height()}px
            üìà Need to expand: width=$widthNeeded, height=$heightNeeded
            üåç Screen bounds: ${screenBounds}
        """.trimIndent())

        // ‚ú® ENHANCED: Direction-specific expansion nh∆∞ ImageTranslationOverlay
        if (widthNeeded > 0) {
            // C·∫ßn m·ªü r·ªông chi·ªÅu ngang
            val expandLeft = widthNeeded / 2
            val expandRight = widthNeeded - expandLeft

            // Ki·ªÉm tra c√≥ th·ªÉ m·ªü r·ªông tr√°i v√† ph·∫£i kh√¥ng
            val canExpandLeft = expandedRect.left - expandLeft >= screenBounds.left &&
                               !hasAdjacentBoxOnLeft(expandedRect, expandLeft)
            val canExpandRight = expandedRect.right + expandRight <= screenBounds.right &&
                                !hasAdjacentBoxOnRight(expandedRect, expandRight)

            if (canExpandLeft && canExpandRight) {
                // M·ªü r·ªông c·∫£ 2 b√™n cho c√¢n ƒë·ªëi
                expandedRect.left -= expandLeft
                expandedRect.right += expandRight
                Log.d("TranslationView", "‚úÖ Expanded both sides by $expandLeft/$expandRight")
            } else if (canExpandLeft && !canExpandRight) {
                // Ch·ªâ m·ªü r·ªông tr√°i, nh∆∞ng m·ªü r·ªông to√†n b·ªô width c·∫ßn thi·∫øt
                val maxLeftExpansion = minOf(widthNeeded, expandedRect.left - screenBounds.left)
                expandedRect.left -= maxLeftExpansion
                Log.d("TranslationView", "‚¨ÖÔ∏è Expanded left only by $maxLeftExpansion")
            } else if (!canExpandLeft && canExpandRight) {
                // Ch·ªâ m·ªü r·ªông ph·∫£i
                val maxRightExpansion = minOf(widthNeeded, screenBounds.right - expandedRect.right)
                expandedRect.right += maxRightExpansion
                Log.d("TranslationView", "‚û°Ô∏è Expanded right only by $maxRightExpansion")
            } else {
                // Kh√¥ng th·ªÉ m·ªü r·ªông ngang, th·ª≠ m·ªü r·ªông t·ªëi ƒëa c√≥ th·ªÉ
                val availableLeft = expandedRect.left - screenBounds.left
                val availableRight = screenBounds.right - expandedRect.right

                if (availableLeft > 0 && !hasAdjacentBoxOnLeft(expandedRect, availableLeft)) {
                    expandedRect.left -= availableLeft
                }
                if (availableRight > 0 && !hasAdjacentBoxOnRight(expandedRect, availableRight)) {
                    expandedRect.right += availableRight
                }
                Log.d("TranslationView", "üîÑ Limited expansion: left=$availableLeft, right=$availableRight")
            }
        }

        if (heightNeeded > 0) {
            Log.d("TranslationView", "üîß HEIGHT EXPANSION NEEDED: $heightNeeded px")
            // C·∫ßn m·ªü r·ªông chi·ªÅu d·ªçc
            val expandTop = heightNeeded / 2
            val expandBottom = heightNeeded - expandTop

            val canExpandTop = expandedRect.top - expandTop >= screenBounds.top &&
                              !hasAdjacentBoxOnTop(expandedRect, expandTop)
            val canExpandBottom = expandedRect.bottom + expandBottom <= screenBounds.bottom &&
                                 !hasAdjacentBoxOnBottom(expandedRect, expandBottom)

            Log.d("TranslationView", """
                üìè Height expansion analysis:
                ‚¨ÜÔ∏è Can expand top: $canExpandTop (need $expandTop px)
                ‚¨áÔ∏è Can expand bottom: $canExpandBottom (need $expandBottom px)
                üìç Current rect: top=${expandedRect.top}, bottom=${expandedRect.bottom}
                üì¶ Screen bounds: top=${screenBounds.top}, bottom=${screenBounds.bottom}
            """.trimIndent())

            if (canExpandTop && canExpandBottom) {
                expandedRect.top -= expandTop
                expandedRect.bottom += expandBottom
                Log.d("TranslationView", "‚ÜïÔ∏è Expanded vertically both sides by $expandTop/$expandBottom")
            } else if (canExpandTop && !canExpandBottom) {
                val maxTopExpansion = minOf(heightNeeded, expandedRect.top - screenBounds.top)
                expandedRect.top -= maxTopExpansion
                Log.d("TranslationView", "‚¨ÜÔ∏è Expanded top only by $maxTopExpansion")
            } else if (!canExpandTop && canExpandBottom) {
                val maxBottomExpansion = minOf(heightNeeded, screenBounds.bottom - expandedRect.bottom)
                expandedRect.bottom += maxBottomExpansion
                Log.d("TranslationView", "‚¨áÔ∏è Expanded bottom only by $maxBottomExpansion")
            } else {
                // M·ªü r·ªông t·ªëi ƒëa c√≥ th·ªÉ
                val availableTop = expandedRect.top - screenBounds.top
                val availableBottom = screenBounds.bottom - expandedRect.bottom

                if (availableTop > 0 && !hasAdjacentBoxOnTop(expandedRect, availableTop)) {
                    expandedRect.top -= availableTop
                }
                if (availableBottom > 0 && !hasAdjacentBoxOnBottom(expandedRect, availableBottom)) {
                    expandedRect.bottom += availableBottom
                }
                Log.d("TranslationView", "üîÑ Limited vertical expansion: top=$availableTop, bottom=$availableBottom")
            }
        }

        // üîß C·∫¢I TI·∫æN 3: ƒê·∫£m b·∫£o box cu·ªëi c√πng h·ª£p l·ªá
        expandedRect.left = maxOf(screenBounds.left, expandedRect.left)
        expandedRect.top = maxOf(screenBounds.top, expandedRect.top)
        expandedRect.right = minOf(screenBounds.right, expandedRect.right)
        expandedRect.bottom = minOf(screenBounds.bottom, expandedRect.bottom)

        // ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
        if (expandedRect.width() < 50) {
            val center = expandedRect.centerX()
            expandedRect.left = maxOf(screenBounds.left, center - 25)
            expandedRect.right = minOf(screenBounds.right, expandedRect.left + 50)
        }

        if (expandedRect.height() < 30) {
            val center = expandedRect.centerY()
            expandedRect.top = maxOf(screenBounds.top, center - 15)
            expandedRect.bottom = minOf(screenBounds.bottom, expandedRect.top + 30)
        }

        Log.d("TranslationView", """
            ‚úÖ EXPANSION COMPLETE:
            üì¶ Original: ${originalRect.width()}√ó${originalRect.height()}px
            üìà Final: ${expandedRect.width()}√ó${expandedRect.height()}px
            üìä Change: ${expandedRect.width() - originalRect.width()}√ó${expandedRect.height() - originalRect.height()}px
        """.trimIndent())

        return expandedRect
    }

    // HEAVILY MODIFIED: T√≠nh to√°n k√≠ch th∆∞·ªõc box v·ªõi multi-line layout th√¥ng minh
    private fun calculateRequiredBoxSize(text: String, textSize: Float): Pair<Int, Int> {
        // ‚ú® ENHANCED: Thay v√¨ d√πng maxWidth nh∆∞ tr∆∞·ªõc, h√£y force multi-line b·∫±ng c√°ch ƒëo v·ªõi width gi·ªõi h·∫°n h·ª£p l√Ω
        val preferredWidth = minOf(400, (screenBounds.width() * 0.6f).toInt()) // Gi·ªõi h·∫°n ƒë·ªÉ force wrap

        val tempTextView = TextView(context).apply {
            this.text = text
            setTextSize(TypedValue.COMPLEX_UNIT_SP, textSize)
            setPadding(8, 8, 8, 8) // ‚ú® SYNC: Kh·ªõp v·ªõi TextView ch√≠nh
            includeFontPadding = false

            // üîß C·∫¢I TI·∫æN CH√çNH: Cho ph√©p multi-line layout
            maxLines = 5 // T·ªëi ƒëa 5 d√≤ng
            ellipsize = null // Kh√¥ng c·∫Øt b·ªõt
            setSingleLine(false) // Quan tr·ªçng: KH√îNG single line
            gravity = Gravity.CENTER_HORIZONTAL or Gravity.TOP // ‚ú® SYNC

            // C·∫£i thi·ªán line spacing cho d·ªÖ ƒë·ªçc
            setLineSpacing(2f, 1.1f) // 2px extra + 1.1x multiplier
        }

        // ‚ú® ENHANCED: ƒêo v·ªõi width EXACTLY ƒë·ªÉ force wrap, height UNSPECIFIED ƒë·ªÉ t·ª± do m·ªü r·ªông
        tempTextView.measure(
            View.MeasureSpec.makeMeasureSpec(preferredWidth, View.MeasureSpec.EXACTLY),
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        )

        val measuredWidth = tempTextView.measuredWidth
        val measuredHeight = tempTextView.measuredHeight

        // ‚ú® LOG: Ghi l·∫°i qu√° tr√¨nh ƒëo
        Log.d("TranslationView", """
            üìê BOX SIZE CALCULATION:
            üî§ Text: ${text.take(30)}${if (text.length > 30) "..." else ""}
            üìè Text size: ${textSize}sp
            üìä Preferred width: ${preferredWidth}px (forced)
            üì¶ Measured: ${measuredWidth}√ó${measuredHeight}px
            üìù Line count: ${tempTextView.lineCount}
        """.trimIndent())

        return Pair(measuredWidth, measuredHeight)
    }
}